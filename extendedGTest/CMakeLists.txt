add_library(${CMAKE_PROJECT_NAME} STATIC extendedGTest.cpp) 
target_include_directories(${CMAKE_PROJECT_NAME} PUBLIC "${THIS_PROJECT}/extendedGTest")
set_target_properties(${CMAKE_PROJECT_NAME} PROPERTIES 
    ARCHIVE_OUTPUT_DIRECTORY_DEBUG "${CMAKE_BINARY_DIR}/output/lib/debug"
    LIBRARY_OUTPUT_DIRECTORY_DEBUG "${CMAKE_BINARY_DIR}/output/lib/debug"
    RUNTIME_OUTPUT_DIRECTORY_DEBUG "${CMAKE_BINARY_DIR}/output/bin/debug"
    ARCHIVE_OUTPUT_DIRECTORY_RELEASE "${CMAKE_BINARY_DIR}/output/lib/release"
    LIBRARY_OUTPUT_DIRECTORY_RELEASE "${CMAKE_BINARY_DIR}/output/lib/release"
    RUNTIME_OUTPUT_DIRECTORY_RELEASE "${CMAKE_BINARY_DIR}/output/bin/release"
)

# Import gtest library
include("${LOCAL_CMAKE_MODULES}/gtest.cmake")

target_link_libraries(${CMAKE_PROJECT_NAME} gtest_main)

if (CMAKE_BUILD_TYPE STREQUAL "Release")
    file(MAKE_DIRECTORY ${LOCAL_CPP_LIBS}/${CMAKE_PROJECT_NAME})
    file(MAKE_DIRECTORY ${LOCAL_CPP_INCLUDES}/${CMAKE_PROJECT_NAME})
    add_custom_command(TARGET ${CMAKE_PROJECT_NAME} POST_BUILD COMMAND cp "${CMAKE_BINARY_DIR}/output/lib/release/*.*" "${LOCAL_CPP_LIBS}/${CMAKE_PROJECT_NAME}/")
    add_custom_command(TARGET ${CMAKE_PROJECT_NAME} POST_BUILD COMMAND cp "${THIS_PROJECT}/${CMAKE_PROJECT_NAME}/*.h" "${LOCAL_CPP_INCLUDES}/${CMAKE_PROJECT_NAME}/")
endif()
